[ 06 실전 애플리케이션 만들기 ]
  06-1 할 일 관리 앱 살펴보기
    ■ 할 일 관래 앱을 만드는 이유: 데이터 조작 방법(입력/조회/변경/삭제)을 간단한 코드로 구현해 볼 수 있기 때문
    □ 앱 살펴보기: 모바일 화면에 최적화된 간단한 앱
      . 맨위의 할일 입력 창에 할일을 입력하고 추가 버튼을 누르거나 엔터를 누르면 할일이 아래의 할일 목록에 추가
      . 할 일 목록의 각 열에서 삭제 버튼을 누르면 해당 열이 삭제되고, 맨 아래에 clear all 버튼을 누르면 모든 할 일이 삭제
	    ※ 브라우저 저장소(로컬 스토리지/세션 스토리지): https://developer.mozilla.org/ko/docs/Web/API/Web_Storage_API
    □ 애플리케이션 컴포넌트 구조: 컴포넌트 기반 프레임워크에서는 컴포넌트의 단위를 작게 설계하도록 권함
      . 화면 1개를 큰 컴포넌트 1개로 놓고 페이지를 제작하는 방식보다 인풋 박스, 목록, 버튼 등의 작은 역할 단위로 관리하는 것이 다른 페이지에서 해당 코드를 재 사용하기가 수월
  06-2 프로젝트 생성하고 구조 확인
    ■ 뷰 CLI를 이용한 프로젝트 생성
      . 원하는 위치에 새로운 폴더 vue-todo를 생성하고 vue-todo 폴더 내에서 명령 프롬프트 창을 열기  → 명령 프롬프트 창에 vue init webpack-simple을 입력
	  . 현재 디렉터리에 프로젝트 생성, 프로젝트 이름, 프로젝트 정보, 저자, 라이선스, Sass사용 여부를 모두 설정
	  . npm install 명령어를 입력하여 package.json 파일에 등록된 자바스크립트 라이브러리를 모두 다운로드
	  . 설치를 완료한 후 npm run dev를 실행하여 어플리케이션이 정상적으로 실행되는지 확인
    □ 프로젝트 초기 설정
      . 반응형 웹 디자인(Responsive Web Design) 태그 설정: 하나의 웹 사이트로 PC, 모바일, 태블릿 등 어느 기기에서도 깨지지 않는 자연스러운 레이아웃을 제공하는 웹 디자인 방법 → viewport 메타 태그 추가
	  . 어썸 아이콘(Awesome Icon) CSS 설정: 애플리케이션의 예쁜 UI를 위해 버튼은 일반 문자열 대신 대중적으로 사용되는 CSS인 어썸 아이콘을 활용
	  . 폰트(font)와 파비콘(favicon) 설정: 파비콘은 브라우저로 웹 앱을 실행했을 때 웹 사이트 제목의 왼쪽에 표시되는 로고를 의미. 폰트는 구글 폰트의 Ubuntu 사용
	    ※ assets 폴더에 파비콘 파일이 없고 logo.png 파일만 있어서 제공되는 실습 소스에서 favicon.ico 파일을 복사해서 넣었습니다.
  06-3 컴포넌트 생성하고 등록
    ■ 컴포넌트 생성
      . 프로젝트 폴더에서 src폴더 밑에 components 폴더를 생성  → 그 아래에 TodoHeader.vue, TodoInput.vue, TodoList.vue, TodoFooter.vue를 생성
	    ※ 애플리케이션의 규모가 커서 기능별로 관리를 해야 할 경우: 'components/기능/컴포넌트.vue'와 같은 형식으로 관리
    □ 컴포넌트 등록: components:{ '컴포넌트 이름': 컴포넌트 내용 }
    □ 컴포넌트 내용을 불러오기 위한 ES6 import 구문: import 불러온 파일의 내용이 담길 객체 from '불러올 파일 위치';
	  ※ ES5 문법과 ES6 문법의 차이: var로 선언한 객체에 컴포넌트의 내용을 직접 담아 넘겨 주느냐 import 구문으로 컴포넌트의 내용을 불러와 담고 넘겨 주느냐의 차이
  06-4 컴포넌트 내용 구현
    ■ 애플리케이션 제목을 보여주는 TodoHeader
      . 애플리케이션 제목 추가 | . CSS로 제목 꾸미기
    □ 할 일을 입력하는 TodoInput
      . 텍스트를 저장하기 위한 버튼 이벤트 추가하기: 텍스트 값을 입력받기 위한 <input> 태그와 텍스트 값을 저장하기 위한 <button> 태그
      . 텍스트를 저장하기 위한 버튼 이벤트 추가 | . 입력받은 텍스트를 로컬 스토리지에 저장
      . addTodo() 안에 예외 처리 코드 넣기 | . 아이콘 이용해 직관적인 버튼 모양 생성
	  	※ 디자인 패턴: 단일 책임 원칙(Single Responsibility Principle): 함수 하나가 하나의 기능만 담당하도록 설계하는 객체 지향 프로그래밍의 디자인 패턴
		  = addTodo()와 clearInput() → https://en.wikipedia.org/wiki/Single-responsibility_principle
    □ 저장된 할 일 목록을 표시하는 TodoList
	  . 할 일 목록 만들기 | . 로컬 스토리지 데이터를 뷰 데이터에 저장 | 뷰 데이터의 아이템 개수만큼 화면에 표시
    □ TodoList.vue에 할 일 삭제 기능 추가: 할 일 목록 & 삭제 버튼 마크업 작업, 할 일 삭제 버튼에 클릭 이벤트 추가
    □ 모두 삭제하기 버튼을 포함하는 TodoFooter: 모두 삭제하기 버튼 추가
  06-5 기존 애플리케이션 구조의 문제점 해결하기
    ■ 현재 애플리케이션 구조의 문제점
      . 할 일을 입력했을 때 할 일 목록에 바로 반영되지 않는 점
  	  . 할 일을 모두 삭제했을 때 할 일 목록에 바로 반영되지 않는 점
    □ 문제 해결을 위한 애플리케이션 구조 개선
      . 뷰 데이터 속성 todoItems와 로컬 스토리지의 데이터 조회, 추가, 삭제를 모두 App 컴포넌트에서 진행
  	  . 하위 컴포넌트들은 그 데이터를 표현하거나 데이터 조작에 대한 요청만 함
    □ props와 이벤트 전달을 이용해 할 일 입력 기능 개선: TodoInput컴포넌트와 TodoList 컴포넌트 수정
  	□ 이벤트 전달을 이용해 Clear All 버튼 기능 개선: 이벤트 전달을 이용해 할 일 삭제 기능 개선
  06-6 더 나은 사용자 경험을 위한 기능 추가
    ■ 뷰 애니메이션
      . 뷰 프레임워크 자체에서 지원하는 애니메이션 기능으로, 데이터 추가, 변경, 삭제에 대해서 페이드 인, 페이드 아웃등의 여러 가지 애니메이션 효과를 지원
	    → 자바스크립트 애니메이션 라이브러리나 CSS 애니메이션 라이브러리도 같이 사용 가능
    □ 뷰 모달(modal): 뷰 공식 사이트에서 제공하는 팝업 대화상자 모달을 활용
	  . https://vuejs.org/v2/examples/modal.html 에서 HTML 부분의 <transition>태그는 <template>태그에 넣고 CSS 부분은 <style> 태그에 추가
