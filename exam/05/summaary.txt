[ 05 화면을 개발하기 위한 기본 지식과 팁 - 템플릿&프로젝트 구성 ]
  05-1 뷰 템플릿
    ■ 뷰 템플릿(Template): HTML, CSS 등의 마크업 속성과 뷰 인스턴스에서 정의한 데이터 및 로직들을 연결하여 사용자가 브라우저에서 볼 수 있는 형태의 HTML로 변환해 주는 속성
	  . 템플릿 속성을 사용하는 방법
	    1) ES5에서 뷰 인스턴스의 template 속성을 활용하는 방법
		  → <script> new Vue({ template: ‘<p>Hello {{message}} </p>’ }); </script>
		    ※ 사용자가 볼 수는 없지만 라이브러리 내부적으로 template 속성에서 정의한 마크업 + 뷰 데이터를 가상 돔 기반의 render()함수로 변환
		2) 싱글 파일 컴포넌트 체계의 <template>코드를 활용하는 방법
		  → <template> <p>hello {{message}}</p> </template>
	  . 템플릿에서 사용하는 뷰의 속성과 문법: 데이터 바인딩 | 자바스크립트 표현식 | 디렉티브 | 이벤트 처리 | 고급 템플릿 기법
	□ 데이터 바인딩: 데이터 바인딩(Data Binding)은 HTML 화면 요소를 뷰 인스턴스이 데이터와 연결하는 것을 의미 ( 주요 문법: {{ }}문법과 v-bind속성 )
	  . {{}} – 콧수염 괄호: {{}}는 뷰 인스턴스의 데이터를 HTML 태그에 연결하는 가장 기본적인 텍스트 삽입 방식인데 모양이 콧수염과 비슷하다고 하여 콧수염 괄호라고 부름
	    → 뷰 뿐만 아니라 다른 언어나 프레임워크에서도 자주 사용되는 템플릿 문법(template syntax)
      . v-bind: v-bind는 아이디, 클래스, 스타일 등의 HTML 속성(attributes) 값에 뷰 데이터 값을 연결할 때 사용하는 데이터 연결 방식
	    → 형식은 v-bind 속성으로 지정할 HTML 속성이나 props 속성 앞에 접두사로 붙임
	□ 자바스크립트 표현식: 뷰의 템플릿에서도 자바스크립트 표현식을 쓸 수 있으며, 데이터 바인딩 방법 중 하나인 {{}} 안에 자바스크립트 표현식을 넣으면 가능
	  . 자바스크립트 표현식에서 주의할 점
	    1) 자바스크립트의 선언문과 분기 구문은 사용 불가
		2) 복잡한 연산은 인스턴스 안에서 처리하고 화면에는 간단한 연산 결과만 표시
    □ 디렉티브: 뷰 디렉티브(Directive)란 HTML 태그 안에 v- 접두사를 가지는 모든 속성들을 의미 ( v-bind 속성도 디렉티브에 해당 )
	  . 화면의 요소를 더 쉽게 조작하기 위해 사용하는 기능  → 뷰의 데이터 값이 변경되었을 때 화면의 요소들이 리액티브(Reactive)하게 반응하여 변경된 데이터 값에 따라 갱신됨
	  . 디렉티브 형식: <a v-if="flag">두잇 Vue.js</a>
	    1) v-if: 지정한 뷰 데이터 값의 참, 거짓 여부에 따라 해당 HTML 태그를 화면에 표시하거나 표시 하지 않음
		2) v-for: 지정한 뷰 데이터의 개수만큼 해당 HTML 태그를 반복 출력
		3) v-show: v-if와 유사하게 데이터의 진위 여부에 따라 해당 HTML 태그를 화면에 표시하거나 표시하지 않음 ( css 효과만 display:none;으로 주어 실제 태그는 남아 있고 화면 상으로만 미표시 )
		4) v-bind : HTML 태그의 기본 속성과 뷰 데이터 속성을 연결
		5) v-on: 화면 요소의 이벤트를 감지하여 처리할 때 사용 ( 예: v-on:click은 해당 태그의 클릭 이벤트를 감지하여 특정 메서드를 실행 )
		6) v-model: 폼에서 주로 사용되는 속성. 폼에 입력한 값을 뷰 인스턴스의 데이터와 즉시 동기화. ( 화면에 입력된 값을 저장하여 서버에 보내거나 watch와 같은 고급 속성을 이용하여 추가 로직을 수행  → <input>, <select>, <textarea> 태그에만 사용 가능 )
	□ 이벤트 처리: 웹 앱에서 사용자의 클릭이나 키보드 입력과 같은 이벤트를 처리하는 것은 당연
	□ 이벤트 처리: 웹 앱에서 사용자의 클릭이나 키보드 입력과 같은 이벤트를 처리하는 것은 당연
	  . 뷰 역시 화면에서 발생한 이벤트를 처리하기 위해 v-on 디렉티브와 methods 속성을 활용  → 제이쿼리 못지않게 뷰도 이벤트 처리가 매우 간단
    □ 고급 템플릿 기법: 고급 템플릿 기법은 실제 애플리케이션을 개발할 때 유용한 속성으로, 위에서 살펴본 데이터 바인딩, 디렉티브와 같은 기본적인 문법과 함께 사용
	  . computed 속성: computed속성은 이러한 데이터 연산들을 정의하는 영역
	  . computed 속성과 methods 속성의 차이점: methods속성은 호출할 때만 해당 로직이 수행되고 computed속성은 대상 데이터의 값이 변경되면 자동적으로 수행된다는 것 ( 수동적으로 데이터를 갱신하느냐, 능동적으로 데이터를 갱신하느냐의 차이 )
      . watch 속성: 데이터 변화를 감지하여 자동으로 특정 로직을 수행
	    → computed 속성과 유사하지만 computed 속성은 내장 API를 활용한 간단한 연산 정도로 적합한 반면에 watch 속성은 데이터 호출과 같이 시간이 상대적으로 더 많이 소모되는 비동기 처리에 적합
  05-2 뷰 프로젝트 구성 방법
    ■ HTML 파일에서 뷰 코드 작성 시의 한계점: HTML 태그를 만드는 만드는 문장이 길어질수록 태그의 출력을 예측하기 어려움
    □ 싱글 파일 컴포넌트 체계: 위 한계를 해결하는 방법  → .vue 파일로 프로젝트 구조를 구성하는 방식
	  . 확장자 .vue 파일 1개는 뷰 애플리케이션을 구성하는 1개의 컴포넌트와 동일
        : <template>HTML 태그 내용</template> <script>export default { javascript 내용 }</script> <style>CSS 내용</style>
    □ 뷰 CLI: 싱글 파일 컴포넌트 체계를 사용하기 위해서는 .vue 파일을 웹 브라우저가 인식할 수 있는 형태의 파일로 변환해 주는 웹팩이나 브라우저리파이와 같은 도구가 필요
	  . 웹팩: 웹 앱의 자원들을 자바스크립트 모듈로 변환해 하나로 묶어 웹 성능을 향상시켜 주는 자바스킓티 모듈 번들러 ( https://webpack.js.org/ )
	  . 브라우저리파이: 웹팩과 유사한 성격의 모듈 번들러지만 웹팩과 다르게 웹 자원 압축이나 빌드 자동화 같은 기능이 없음 ( http://browserify.org/ )
	  ※ 뷰 개발자들이 편하게 프로젝트를 구성할 수 있도록 뷰 코어 팀에서 CLI(Command Line Interface) 도구를 제공
    □ 뷰 CLI 설치
	  . npm install vue-cli -global
    □ 프로젝트 생성: 뷰 개발을 시작할 때 초기 프로젝트를 쉽게 구성해 주는 명령어  → vue init
	  . 프로젝트 템플릿 종류 ( 뷰 프레임워크에 가장 집중할 수 있는 템플릿 = webpack-simple )
	    1) vue init webpack: 고급 웹팩 기능을 활용한 프로젝트 구성 방식. 테스팅, 문법 검사 등을 지원
		2) vue init webpack-simple: 웹팩 최소 기능을 활용한 프로젝트 구성 방식. 빠른 화면 프로토타이핑용
	    3) vue init browserify: 브라우저리파이 최소 기능을 활용한 프로젝트 구성 방식. 빠른 화면 프로토타이핑용
		4) vue init browserify-simple: 브라우저리파이 최소 기능을 활용한 프로젝트 구성 방식. 빠른 화면 프로토타이핑용
		5) vue init simple: 최소 뷰 기능만 들어간 HTML 파일 1개 생성
		6) vue init pwa: 웹팩 기반의 프로그레시브 웹 앱(PWA, Progressive Web App) 기능을 지원하는 뷰 프로젝트
    □ 뷰 로더(Vue Loader): 웹팩에서 지원하는 라이브러리  → 싱글 파일 컴포넌트 체계에서 사용하는 .vue 파일의 내용을 브라우저에서 실행 가능한 웹 페이지의 형태로 변환
    □ 웹팩 설정 파일의 뷰 로더 속성 확인: webpack-simple 프로젝트의 webpack.config.js 파일을 보면 뷰 로더가 정의되어 있음
	  . module과 rules: 웹팩의 로더를 설정하는 속성 | . test: 로더가 적용될 대상 파일을 지정하는 속성 | . loader: 적용할 로더의 종류를 지정하는 속성
      . 뷰 CLI로 생성된 프로젝트의 모든 .vue 파일에 뷰 로더가 적용: 뷰 로더 → App.vue → Login.vue → Main.vue → Table.vue
    □ 뷰 CLI로 프로젝트를 구성하는 과정
	  1) 뷰 CLI 설치: npm i vue-cli -g
	  2) 프로젝트 생성: vue init webpack-simple
	  3) 관련 라이브러리 설치: npm install
	  4) 프로젝트 구동: npm run dev
